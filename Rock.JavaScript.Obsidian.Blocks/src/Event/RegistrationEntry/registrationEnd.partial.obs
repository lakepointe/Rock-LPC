<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <div class="registrationentry-registration-attributes">
        <RockForm @submit="onNext">
            <AttributeValuesContainer v-model="attributeValues" :attributes="attributes" isEditMode :showCategoryLabel="false" />

            <div class="actions row">
                <div class="col-xs-6">
                    <RockButton v-if="showPrevious" btnType="default" @click="onPrevious">
                        <!-- LPC MODIFIED CODE -->
                        {{ getLang() == "es" ? "Anterior" : "Previous" }}
                        <!-- END LPC MODIFIED CODE -->
                    </RockButton>
                </div>
                <div class="col-xs-6 text-right">
                    <RockButton btnType="primary" type="submit">
                        <!-- LPC MODIFIED CODE -->
                        {{ getLang() == "es" ? "Siguiente" : "Next" }}
                        <!-- END LPC MODIFIED CODE -->
                    </RockButton>
                </div>
            </div>
        </RockForm>
    </div>
</template>
<script setup lang="ts">
    import { computed, ref, watch } from "vue";
    import { CurrentRegistrationEntryState, use } from "./utils.partial";
    import AttributeValuesContainer from "@Obsidian/Controls/attributeValuesContainer.obs";
    import RockButton from "@Obsidian/Controls/rockButton.obs";
    import RockForm from "@Obsidian/Controls/rockForm.obs";
    import { PublicAttributeBag } from "@Obsidian/ViewModels/Utility/publicAttributeBag";
    // LPC CODE
    import { useStore } from "@Obsidian/PageState";

    const store = useStore();
    // END LPC CODE

    const emit = defineEmits<{
        (e: "next"): void,
        (e: "previous"): void
    }>();

    const registrationEntryState = use(CurrentRegistrationEntryState);

    // #region Values

    const attributeValues = ref<Record<string, string>>({});

    if (registrationEntryState.viewModel.registrationAttributesEnd) {
        for (const a of registrationEntryState.viewModel.registrationAttributesEnd) {
            attributeValues.value[a.key ?? ""] = (registrationEntryState.registrationFieldValues[a.attributeGuid ?? ""] as string) || "";
        }
    }

    // #endregion

    // #region Computed Values

    const showPrevious = computed((): boolean => {
        return registrationEntryState.firstStep === registrationEntryState.steps.intro;
    });

    const attributes = computed((): Record<string, PublicAttributeBag> => {
        const attrs: Record<string, PublicAttributeBag> = {};

        if (registrationEntryState.viewModel.registrationAttributesEnd) {
            for (const a of registrationEntryState.viewModel.registrationAttributesEnd) {
                attrs[a.key ?? ""] = a;
                
                // LPC CODE
                if (getLang() == "es") {
                    if (a.preHtml != null && a.preHtml != "" && a.configurationValues != null) {
                        // Get Translations
                        let optionTranslations = new Map();

                        let el = document.createElement('div');
                        el.innerHTML = a.preHtml ?? "";
                        let options = el.getElementsByClassName("SpanishOption");
                        for (let j = 0; j < options.length; j++) {
                            optionTranslations.set(options[j].getAttribute("option"), options[j].textContent);
                        }

                        // Translate Values
                        let values = a.configurationValues["values"];
                        let trueText = a.configurationValues["truetext"];
                        let falseText = a.configurationValues["falsetext"];

                        // Handle Booleans
                        if (trueText != null && trueText != "") {
                            if (optionTranslations.has(trueText)) {
                                a.configurationValues["truetext"] = optionTranslations.get(trueText);
                            }
                        }
                        if (falseText != null && falseText != "") {
                            if (optionTranslations.has(falseText)) {
                                a.configurationValues["falsetext"] = optionTranslations.get(falseText);
                            }
                        }

                        // Expected values examples:
                        // [{"value":"1","text":"One"},{"value":"2","text":"Two"},{"value":"3","text":"Three"}]
                        // [{"value":"1","text":"One","description":"The first value"},{"value":"2","text":"Two","description":"The second value"},{"value":"3","text":"Three","description":"The third value"}]
                        if (values != null && values != "" && values.includes("value") && values.includes("text")) {
                            let valuesObjects = JSON.parse(values);
                            for (let y = 0; y < valuesObjects.length; y++) {
                                if (valuesObjects[y].hasOwnProperty('text')) {
                                    let originalText = valuesObjects[y].text;
                                    if (optionTranslations.has(originalText)) {
                                        valuesObjects[y].text = optionTranslations.get(originalText);
                                        if (valuesObjects[y].hasOwnProperty('description')) {
                                            valuesObjects[y].description = optionTranslations.get(originalText);
                                        }
                                    }
                                }
                            }
                            // Replace values property with the results
                            a.configurationValues["values"] = JSON.stringify(valuesObjects);
                        }
                    }
                }
                // END LPC CODE
            }
        }

        return attrs;
    });

    // #endregion

    // #region Functions

    function onPrevious(): void {
        emit("previous");
    }

    function onNext(): void {
        emit("next");
    }

    // LPC CODE
    /** Gets the lang parameter from the query string.
     * Returns "en" or "es". Defaults to "en" if invalid. */
    function getLang(): string {
        let lang = typeof store.state.pageParameters["lang"] === "string" ? store.state.pageParameters["lang"] : "";
        if (lang != "es") {
            lang = "en";
        }
        return lang;
    }
    // END LPC CODE

    // #endregion

    // #region Watchers

    watch(attributeValues, () => {
        if (registrationEntryState.viewModel.registrationAttributesEnd) {
            for (const a of registrationEntryState.viewModel.registrationAttributesEnd) {
                registrationEntryState.registrationFieldValues[a.attributeGuid ?? ""] = attributeValues.value[a.key ?? ""];
            }
        }
    });

    // #endregion
</script>