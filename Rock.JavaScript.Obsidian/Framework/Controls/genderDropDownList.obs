<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <!-- LPC MODIFIED CODE -->
    <DropDownList v-model="internalValue" :label="getLang() == 'es' ? 'Género' : 'Gender'" :items="options" :showBlankItem="false" :rules="computedRules" />
    <!-- END LPC MODIFIED CODE -->
</template>

<script setup lang="ts">
    import { PropType, computed } from "vue";
    import { normalizeRules, rulesPropType } from "@Obsidian/ValidationRules";
    import { ListItemBag } from "@Obsidian/ViewModels/Utility/listItemBag";
    import DropDownList from "./dropDownList.obs";
    import { Gender } from "@Obsidian/Enums/Crm/gender";
    import { useVModelPassthrough } from "@Obsidian/Utility/component";
    // LPC CODE
    import { useStore } from "@Obsidian/PageState";

    const store = useStore();
    // END LPC CODE

    const props = defineProps({
        modelValue: {
            type: Object as PropType<string | string[]>,
            required: true
        },

        rules: rulesPropType
    });

    const emit = defineEmits<{
        (e: "update:modelValue", value: string | string[]): void;
    }>();

    const internalValue = useVModelPassthrough(props, "modelValue", emit);

    const options: ListItemBag[] = [
        { text: " ", value: Gender.Unknown.toString() },
        // LPC MODIFIED CODE
        { text: getLang() == "es" ? "Masculino" : "Male", value: Gender.Male.toString() },
        { text: getLang() == "es" ? "Femenino" : "Female", value: Gender.Female.toString() }
        // END LPC MODIFIED CODE
    ];

    const computedRules = computed(() => {
        const rules = normalizeRules(props.rules);
        const notEqualRule = `notequal:${Gender.Unknown}`;

        if (rules.includes("required") && !rules.includes(notEqualRule)) {
            rules.push(notEqualRule);
        }

        return rules;
    });

    // LPC CODE
    /** Gets the lang parameter from the query string.
     * Returns "en" or "es". Defaults to "en" if invalid. */
    function getLang(): string {
        let lang = typeof store.state.pageParameters["lang"] === "string" ? store.state.pageParameters["lang"] : "";
        if (lang != "es") {
            lang = "en";
        }
        return lang;
    }
    // END LPC CODE
</script>
