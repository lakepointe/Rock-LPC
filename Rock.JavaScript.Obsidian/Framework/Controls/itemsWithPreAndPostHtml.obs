<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<script lang="ts">
    import { defineComponent, h, PropType, Slots, VNode } from "vue";
    import { ItemWithPreAndPostHtml } from "@Obsidian/Types/Controls/itemsWithPreAndPostHtml"; 
    // LPC CODE
    import { useStore } from "@Obsidian/PageState";

    const store = useStore();

    /** Gets the lang parameter from the query string.
     * Returns "en" or "es". Defaults to "en" if invalid. */
    function getLang(): string {
        let lang = typeof store.state.pageParameters["lang"] === "string" ? store.state.pageParameters["lang"] : "";
        if (lang != "es") {
            lang = "en";
        }
        return lang;
    }

    function translateAddress(): void {
        // Translate placeholders on address fields
        var addressFields = document.querySelectorAll("[id^='rock-addresscontrol'] input[placeholder]");
        for (let i = 0; i < addressFields.length; i++) {
            if (addressFields[i].getAttribute("placeholder") == "Address Line 1") {
                addressFields[i].setAttribute("placeholder", "Dirección Línea 1");
            }
            else if (addressFields[i].getAttribute("placeholder") == "Address Line 2") {
                addressFields[i].setAttribute("placeholder", "Dirección Línea 2");
            }
            else if (addressFields[i].getAttribute("placeholder") == "City") {
                addressFields[i].setAttribute("placeholder", "Ciudad");
            }
            else if (addressFields[i].getAttribute("placeholder") == "Zip") {
                addressFields[i].setAttribute("placeholder", "Código Postal");
            }
        }
    }

    async function delayedTranslateAddress(): Promise<void> {
        // Call translateAddress() after delays to ensure that all elements that need to be translated are translated
        // soon after they are loaded
        translateAddress();
        await new Promise(f => setTimeout(f, 50));
        translateAddress();
        await new Promise(f => setTimeout(f, 100));
        translateAddress();
    }

    async function waitForElm(selector: string): Promise<Element> {
        return new Promise(() => {
            if (document.querySelector(selector)) {
                return document.querySelector(selector);
            }
            const observer = new MutationObserver(mutations => {
                if (document.querySelector(selector)) {
                    observer.disconnect();
                    return document.querySelector(selector);
                }
            });
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        });
    }
    // END LPC CODE

    export default defineComponent({
        props: {
            items: { type: Array as PropType<ItemWithPreAndPostHtml[]>, default: [] }
        },
        setup: (props, { slots }) => {
            let renderCt: HTMLDivElement;

            // Convert a Node's children into VNodes
            function childrenToVNodes(node: Node, slots: Slots): Array<ReturnType<typeof domToVNodes>> {
                return Array.from(node.childNodes).map(node => domToVNodes(node, slots));
            }

            // Convert a Node into VNode
            function domToVNodes(domNode: Node, slots: Slots): VNode | string | Array<VNode | string | VNode[]> {
                const attributes = {};
                let children: ReturnType<typeof childrenToVNodes>;
                let text: string;
                let el: Element;
                let textNode: Text;

                switch (domNode.nodeType) {
                    case 1:
                        // Element: convert to VNode
                        el = domNode as Element;
                        for (const { name, value } of el.attributes) {
                            // Use ^ to force them to be used as attributes
                            attributes[`^${name}`] = value;
                        }

                        children = childrenToVNodes(el, slots);

                        return h(el.tagName.toLowerCase(), attributes, children);
                    case 3:
                        // Text: convert to string, and/or replace the placeholder text with slot content
                        textNode = domNode as Text;
                        text = textNode.data;

                        // Find placeholders
                        if (/%%%:::[a-zA-Z0-9-_]+:::%%%/.test(text)) {
                            // Split other text out away from placeholders
                            const parts = text.split("%%%");

                            // Find the pieces that are placeholders and convert them to slot content or return other text
                            return parts.map(txt => {
                                if (/:::[a-zA-Z0-9-_]+:::/.test(txt)) {
                                    const matches = txt.match(/[a-zA-Z0-9-_]+/);
                                    if (matches && matches.length > 0) {
                                        const [slotName] = matches;
                                        return slots[slotName]?.() ?? slotName;
                                    }
                                    return txt;
                                }

                                return txt;
                            });
                        }

                        return textNode.data;
                }

                return "";
            }

            // Render Function
            return () => {
                // LPC MODIFIED CODE
                const html = props.items.map(({ slotName, preHtml, postHtml, isRequired }) => {
                // END LPC MODIFIED CODE
                    // LPC CODE
                    // Create a temporary empty element and put the preHtml inside it
                    var el = document.createElement('div');
                    el.innerHTML = preHtml;

                    // Get the first element with the class 'es' from within the temporary element
                    var es = el.getElementsByClassName("SpanishLabel")[0];

                    // If there was an element in the preHtml with the class 'es'
                    if (getLang() == "es" && es && es.textContent != "" && es.textContent != null) {
                        // If the field is required add the 'required-indicator'
                        // class to the label to generate a required bubble
                        if (isRequired == true) {
                            preHtml += "<label class='control-label required-indicator'>";
                        }
                        else {
                            preHtml += "<label class='control-label'>";
                        }
                        // Put the contents of the 'es' element into the label, close the label,
                        // and wrap the field in a div with the class 'hide-label' to hide the original label
                        preHtml += es.textContent + "</label><div class='hide-label'>";
                        postHtml += "</div>";
                    }
                    // END LPC CODE

                    return `${preHtml}%%%:::${slotName}:::%%%${postHtml}`;
                }).join("");

                if (!renderCt) {
                    renderCt = document.createElement("div");
                }

                renderCt.innerHTML = html;

                return childrenToVNodes(renderCt, slots);
            };
        },
        // LPC CODE
        mounted() {
            // Execute translateAddress() as soon as an element exists that can be translated
            if (getLang() == 'es') {
                waitForElm("[id^='rock - addresscontrol'] input[placeholder]").then((elm) => {
                    delayedTranslateAddress();
                })
            }
        },
        updated() {
            if (getLang() == 'es') {
                this.$nextTick(() => {
                    translateAddress();
                });
            }
        },
        // END LPC CODE
    });
</script>
